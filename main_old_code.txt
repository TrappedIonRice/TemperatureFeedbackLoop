from SerialManager import SerialManagerArduino, SerialManagerCombine
import numpy as np
import time
from scipy import interpolate
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton
from qtGUI import Ui_MainWindow


class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100, y_scale="linear"):
        with plt.style.context("dark_background"):
            fig = Figure(figsize=(width, height), dpi=dpi)
            self.axes = fig.add_subplot(111, yscale=y_scale)
        super(MplCanvas, self).__init__(fig)


def k_type_fit():
    volt = []
    with open("k-type-table.txt", "r") as f:
        lines = f.readlines()
    for l in lines:
        l = l.strip().split('\t')
        volt += [(float(v)/1000) for v in l[1:-1:1]]
    temp = np.arange(volt.__len__())
    f = interpolate.interp1d(volt, temp, bounds_error=False, fill_value="extrapolate")
    return f


class LoopManager(Ui_MainWindow):
    def __init__(self, mainwindow):
        # Initialize the qt designer gui
        self.mainwindow = mainwindow
        self.setupUi(mainwindow)

        self.temperature_log = [[], []]
        self.current_log = []

        # Track whether this is the first/second update (for boundary conditions in update_plot)
        self.first_update = True
        self.second_update = False

        # Add the temperature canvas and related widgets to the gui
        self.canvasT = MplCanvas(self, width=5, height=4, dpi=100, y_scale="linear")
        self.canvasT.axes.set_xlabel("time (s)")
        self.canvasT.axes.set_title("Temperature ($^\circ$C)")
        toolbarT = NavigationToolbar(self.canvasT, mainwindow)
        layoutT = QtWidgets.QVBoxLayout()

        self.button1 = QPushButton('Toggle Autoscaling')
        self.button1.setCheckable(True)
        self.button1.toggle()
        layoutT.addWidget(self.button1)
        # self.autoscale_T = True

        layoutT.addWidget(toolbarT)
        layoutT.addWidget(self.canvasT)

        # Add the pressure canvas and related widgets to the gui
        self.canvasP = MplCanvas(self, width=5, height=4, dpi=100, y_scale="log")
        self.canvasP.axes.set_xlabel("time (s)")
        self.canvasP.axes.set_title("Pressure (Torr)")
        toolbarP = NavigationToolbar(self.canvasP, mainwindow)
        layoutP = QtWidgets.QVBoxLayout()

        self.button2 = QPushButton('Toggle Autoscaling')
        self.button2.setCheckable(True)
        self.button2.toggle()
        layoutP.addWidget(self.button2)
        # self.autoscale_P = True

        layoutP.addWidget(toolbarP)
        layoutP.addWidget(self.canvasP)

        # Add the temperature and pressure layouts together to finish building the gui
        self.horizontalLayoutPlot.addLayout(layoutT)
        self.horizontalLayoutPlot.addLayout(layoutP)

        self.actionStart.triggered.connect(self.start_logging)
        self.actionRefresh.triggered.connect(self.refresh)


        self.target_temp = 100
        self.step_size = 0.05

        self.maxVoltage = 3.3  # (V) arduino due analog reading maximum
        self.bitdepth = 12  # arduino due analog read bit depth
        self.t0 = 0  # To store the start time

        self.f = k_type_fit()
        self.gain = 64.33
        self.offset = -0.076

    def start_logging(self):
        self.first_update = True

        self.isLogging = True
        if self.t0 == 0:
            self.t0 = time.time()
        self.actionStart.setText("Stop")
        self.actionStart.triggered.connect(self.stop_logging)

    def check_logging_status(self):
        return self.isLogging

    def stop_logging(self):
        self.isLogging = False
        self.actionStart.setText("Start")
        self.actionStart.triggered.connect(self.start_logging)

    def refresh(self):
        self.temperature_log = [[], []]
        self.current_log = []
        if self.check_logging_status():
            self.t0 = time.time()
        else:
            self.t0 = 0

        # First/second iteration boundary conditions
        self.first_update = True
        self.second_update = True

        self.update_plot()

    def update_current(self, m):
        print('Temperature: ' + self.temperature_log[1][-1])
        self.current_log.append(self.step_size * (self.target_temp - self.temperature_log[1][-1]) + self.current_log[-1])
        print('Current: ' + self.current_log[-1])
        m.current_value = min(int(self.current_log[-1]), 255)
        if self.current_log[-1] > 255:
            print('maximum current exceeded')
        print()

    def get_arduino(self, v):
        v = v / 2 ** self.bitdepth * self.maxVoltage  # convert from arduino result to real voltage (V)
        # print((v[1] - self.offset[1]) / self.gain[1])
        # T = self.f(v)
        t = time.time() - self.t0
        s = str(t) + '\t'
        self.temperature_log[0] += [t]
        T = self.f((v - self.offset) / self.gain)  # convert to the voltage before the amplifier
        self.temperature_log[1] += [T]
        s += str(T)

        print(s)

    def update_plot(self):
        with plt.style.context("dark_background"):

            if self.first_update or self.second_update:
                if not self.first_update and self.second_update:
                    self.second_update = False
                self.first_update = False

                # Clear the canvas.
                self.canvasT.axes.cla()

                # Plot the current data
                for i in range(self.channelNum):
                    if self.channelSwitches[i] > 0 and len(self.channelData[i][1]) > 0:
                        self.canvasT.axes.plot(self.channelData[i][0], self.channelData[i][1],
                                               label="ch" + str(i + 1) + ": " + "%.1f" % (self.channelData[i][1][-1]) + "C")
                print(self.channelData)

                # set the lower x bound and finish building the graph
                self.canvasT.axes.set_xbound(lower=0)
                self.canvasT.axes.legend()
                self.canvasT.axes.set_xlabel("time (s)")
                self.canvasT.axes.set_title("Temperature ($^\circ$C)")
                self.canvasT.draw()

                # Clear the canvas
                self.canvasP.axes.cla()

                # Plot the current data
                # if len(self.pressureData[1]) > 0:
                self.canvasP.axes.plot(self.pressureData[0], self.pressureData[1])

                # set the lower x bound and finish building the graph
                self.canvasP.axes.set_xbound(lower=0)
                # self.canvasP.axes.legend()
                self.canvasP.axes.set_xlabel("time (s)")
                self.canvasP.axes.set_title("Pressure (Torr)")
                self.canvasP.axes.set_yscale("log")
                self.canvasP.draw()

                return

            labels = []
            lines = self.canvasT.axes.get_lines()
            active_channels = []

            # Reset the data and update the labels
            for i in range(self.channelNum):
                if self.channelSwitches[i] > 0 and len(self.channelData[i][1]) > 0:
                    active_channels.append(i)
                    line = lines.pop(0)
                    line.set_data(self.channelData[i][0], self.channelData[i][1])
                    labels.append("ch" + str(i + 1) + ": " + "%.1f" % (self.channelData[i][1][-1]) + "C")

            # Update scaling if the temperature autoscale is toggled
            if self.button1.isChecked():
                self.button1.setText('Autoscaling Enabled')
                self.canvasT.axes.set_xbound(lower=0, upper=max(self.channelData[0][0]) * 1.05)
                y_max = max(max(y) for y in (self.channelData[i][1] for i in active_channels))
                y_min = min(min(y) for y in (self.channelData[i][1] for i in active_channels))
                self.canvasT.axes.set_ybound(lower=y_min - (y_max - y_min) * 0.05, upper=y_max + (y_max - y_min) * 0.05)
            else:
                self.button1.setText('Autoscaling Disabled')

            # Trigger the canvas to update and redraw.
            self.canvasT.axes.legend(labels)
            self.canvasT.draw()
            self.canvasT.flush_events()


            # Reset the data and update the labels
            if len(self.pressureData[1]) > 0:
                line = self.canvasP.axes.get_lines()[0]
                line.set_data(self.pressureData[0], self.pressureData[1])
                self.canvasP.axes.legend(["P:" + "%.3e Torr" % self.pressureData[1][-1]])

                # Update scaling if the pressure autoscale is toggled
                if self.button2.isChecked():
                    self.button2.setText('Autoscaling Enabled')
                    self.canvasP.axes.set_xbound(lower=0, upper=max(self.pressureData[0]) * 1.05)
                    y_max = max(self.pressureData[1])
                    y_min = min(self.pressureData[1])
                    self.canvasP.axes.set_ybound(lower=y_min - (y_max - y_min) * 0.05, upper=y_max + (y_max - y_min) * 0.05)
                else:
                    self.button2.setText('Autoscaling Disabled')

            # Trigger the canvas to update and redraw.
            self.canvasP.axes.tick_params(axis='y', which='both', labelsize='small', direction='in', pad=0)
            self.canvasP.draw()
            self.canvasP.flush_events()

    def check_logging_status(self):
        return True


loop = LoopManager()

manager = SerialManagerArduino(loop.check_logging_status)
manager.valueChanged.connect(loop.get_arduino)
manager.update.connect(loop.update_current)
